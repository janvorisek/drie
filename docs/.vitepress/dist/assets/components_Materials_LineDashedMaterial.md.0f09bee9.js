import{z as y,d as l,C as D,b as C,c as F,_ as g}from"./chunks/TextureLoader.vue_vue_type_script_setup_true_lang.748abb6c.js";import{_ as A}from"./chunks/PerspectiveCamera.vue_vue_type_script_setup_true_lang.f7f80909.js";import{_ as x}from"./chunks/OrbitControls.vue_vue_type_script_setup_true_lang.4486bf42.js";import{_ as b}from"./chunks/LineSegments.vue_vue_type_script_setup_true_lang.862816f1.js";import{_ as S}from"./chunks/Mesh.vue_vue_type_script_setup_true_lang.6dfa410c.js";import{_ as z}from"./chunks/AxesHelper.vue_vue_type_script_setup_true_lang.d3044266.js";import{_ as v}from"./chunks/CircleGeometry.vue_vue_type_script_setup_true_lang.c05bd49e.js";import{_ as L}from"./chunks/EdgesGeometry.vue_vue_type_script_setup_true_lang.df84811c.js";import{d as m,i as c,p as T,m as E,o as _,c as u,f as h,e as s,w as r,u as n,b as M,a as f}from"./app.b0bbb7e4.js";import{V as P}from"./chunks/v-tweakpane.80ea458d.js";const $={name:"LineDashedMaterial",render:()=>null},k=m({...$,props:{color:{default:16777215},scale:{default:1},dashSize:{default:3},gapSize:{default:1},name:{default:""},opacity:{default:1},transparent:{type:Boolean,default:!1}},setup(p,{expose:t}){const a=p,e=new y({color:a.color});e.name=a.name;const i=c("addMaterial");i(e);const d=c("mesh",null);d&&(d.material=e);function o(){e.color=new D(a.color),e.scale=a.scale,e.dashSize=a.dashSize,e.gapSize=a.gapSize,e.opacity=a.opacity,e.transparent=a.transparent,e.needsUpdate=!0}return o(),l(a,"color",o),l(a,"scale",o),l(a,"dashSize",o),l(a,"gapSize",o),l(a,"opacity",o),l(a,"transparent",o),T("material",e),t({three:e}),{props:a,three:e,addMaterial:i,mesh:d,applyProps:o}}}),w={class:"example-with-props"},I={class:"example"},O={class:"example-props"},V=m({__name:"LineDashedMaterial",setup(p){const t=E({color:"#000000",scale:1,dashSize:.25,gapSize:.1,transparent:!1,opacity:1}),a=e=>{e.addInput(t,"color"),e.addInput(t,"scale",{min:.1,max:2}),e.addInput(t,"dashSize",{min:.01,max:1}),e.addInput(t,"gapSize",{min:.01,max:1}),e.addInput(t,"transparent"),e.addInput(t,"opacity",{min:0,max:1})};return(e,i)=>(_(),u("div",w,[h("div",I,[s(n(g),{antialias:!0},{default:r(()=>[s(n(A),{position:[.1,0,2],up:[0,0,1]},{default:r(()=>[s(n(x))]),_:1},8,["position"]),s(n(C),{background:"#f9f9f9"},{default:r(()=>[s(n(S),null,{default:r(()=>[s(n(F),{transparent:!0,opacity:0}),s(n(v),{name:"geo",radius:1})]),_:1}),s(n(b),null,{default:r(()=>[s(n(L),{geometry:"geo"}),s(n(k),{color:t.color,scale:t.scale,"dash-size":t.dashSize,"gap-size":t.gapSize,transparent:t.transparent,opacity:t.opacity},null,8,["color","scale","dash-size","gap-size","transparent","opacity"])]),_:1}),s(n(z),{size:1})]),_:1})]),_:1})]),h("div",O,[s(n(P),{pane:{title:"Properties"},onOnPaneCreated:a})])]))}});const N=f('<h1 id="linedashedmaterial" tabindex="-1">LineDashedMaterial <a class="header-anchor" href="#linedashedmaterial" aria-hidden="true">#</a></h1><p>A material for drawing dashed line geometries.</p><p>Suitable for <a href="/components/Objects/Line"><code>&lt;Line /&gt;</code></a>, <a href="/components/Objects/LineSegments"><code>&lt;LineSegments /&gt;</code></a> or <a href="/components/Objects/LineLoop"><code>&lt;LineLoop /&gt;</code></a>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2>',4),q=f(`<h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>color </code></td><td>Color of the material.</td><td>union</td><td>0xffffff</td></tr><tr><td><code>scale </code></td><td>The scale of the dashed part of a line.</td><td>number</td><td>1</td></tr><tr><td><code>dashSize </code></td><td>The size of the dash. This is both the gap with the stroke.</td><td>number</td><td>3</td></tr><tr><td><code>gapSize </code></td><td>The size of the gap.</td><td>number</td><td>1</td></tr><tr><td><code>name </code></td><td>Name of the material</td><td>string</td><td>&quot;&quot;</td></tr><tr><td><code>opacity </code></td><td>Float in the range of <code>0.0 - 1.0</code> indicating how transparent the material is.</td><td>number</td><td>1</td></tr><tr><td><code>transparent</code></td><td>Defines whether this material is transparent.</td><td>boolean</td><td>false</td></tr></tbody></table><h2 id="expose" tabindex="-1">Expose <a class="header-anchor" href="#expose" aria-hidden="true">#</a></h2><h3 id="three" tabindex="-1">three <a class="header-anchor" href="#three" aria-hidden="true">#</a></h3><blockquote><p>You can access the managed <code>THREE.LineDashedMaterial</code> instance using the exposed <code>three</code> property.</p></blockquote><h4 id="example-code" tabindex="-1">Example code <a class="header-anchor" href="#example-code" aria-hidden="true">#</a></h4><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">LineDashedMaterial</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">material</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Do something with the THREE.LineDashedMaterial instance</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">threeMaterial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">material</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><hr>`,9),X=JSON.parse('{"title":"LineDashedMaterial","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]},{"level":2,"title":"Expose","slug":"expose","link":"#expose","children":[{"level":3,"title":"three","slug":"three","link":"#three","children":[]}]}],"relativePath":"components/Materials/LineDashedMaterial.md"}'),B={name:"components/Materials/LineDashedMaterial.md"},Z=Object.assign(B,{setup(p){return(t,a)=>{const e=M("ClientOnly");return _(),u("div",null,[N,s(e,null,{default:r(()=>[s(V)]),_:1}),q])}}});export{X as __pageData,Z as default};
