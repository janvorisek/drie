import{_ as u,b as f,a as y}from"./chunks/TextureLoader.vue_vue_type_script_setup_true_lang.e293ee15.js";import{_ as D}from"./chunks/PerspectiveCamera.vue_vue_type_script_setup_true_lang.625208db.js";import{_ as C}from"./chunks/OrbitControls.vue_vue_type_script_setup_true_lang.7ef495bc.js";import{_ as F}from"./chunks/LineSegments.vue_vue_type_script_setup_true_lang.ec844224.js";import{_ as b}from"./chunks/Mesh.vue_vue_type_script_setup_true_lang.b091c7cf.js";import{_ as A}from"./chunks/AxesHelper.vue_vue_type_script_setup_true_lang.5b8f6858.js";import{_ as g}from"./chunks/BoxGeometry.vue_vue_type_script_setup_true_lang.ea50e738.js";import{_ as x}from"./chunks/WireframeGeometry.vue_vue_type_script_setup_true_lang.edb1b7c7.js";import{_ as v}from"./chunks/LineBasicMaterial.vue_vue_type_script_setup_true_lang.d8b0d5b2.js";import{V as M}from"./chunks/v-tweakpane.70a2bd7e.js";import{d as k,k as E,o as p,c as h,l as t,a as e,w as o,u as a,r as B,v as $,e as d,x as r,f as w}from"./app.aa0e4490.js";const T={class:"example-with-props"},S={class:"example"},P={class:"example-props"},N=k({__name:"MeshBasicMaterial",setup(_,{expose:n}){const s=E({color:"#666666",transparent:!1,opacity:1}),i=l=>{l.addInput(s,"color"),l.addInput(s,"transparent"),l.addInput(s,"opacity",{min:0,max:1})};return n(s),(l,c)=>(p(),h("div",T,[t("div",S,[e(a(y),{antialias:!0},{default:o(()=>[e(a(D),{position:[2,2,3],up:[0,0,1]},{default:o(()=>[e(a(C))]),_:1}),e(a(u),{background:"#f9f9f9"},{default:o(()=>[e(a(b),null,{default:o(()=>[e(a(f),{color:s.color,transparent:s.transparent,opacity:s.opacity},null,8,["color","transparent","opacity"]),e(a(g),{name:"geo"})]),_:1}),e(a(F),null,{default:o(()=>[e(a(x),{geometry:"geo"}),e(a(v),{color:"black"})]),_:1}),e(a(A),{size:2})]),_:1})]),_:1})]),t("div",P,[e(a(M),{pane:{title:"Properties"},onOnPaneCreated:i})])]))}});const V=t("h1",{id:"meshbasicmaterial",tabindex:"-1"},[r("MeshBasicMaterial "),t("a",{class:"header-anchor",href:"#meshbasicmaterial","aria-hidden":"true"},"#")],-1),q=t("p",null,"A material for drawing geometries in a simple shaded (flat or wireframe) way.",-1),R=t("p",null,"This material is not affected by lights.",-1),I=t("h2",{id:"example",tabindex:"-1"},[r("Example "),t("a",{class:"header-anchor",href:"#example","aria-hidden":"true"},"#")],-1),O=t("h3",{id:"code",tabindex:"-1"},[r("Code "),t("a",{class:"header-anchor",href:"#code","aria-hidden":"true"},"#")],-1),H=t("p",null,[r("Note: "),t("em",null,"The following code is updated according to the properties set above.")],-1),L=w(`<h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>color </code></td><td>Color of the material.</td><td>union</td><td></td></tr><tr><td><code>side </code></td><td>Defines which side of faces will be rendered - front, back or both. Represtented by <code>THREE.Side</code>.</td><td>Side</td><td>FrontSide</td></tr><tr><td><code>name </code></td><td>Name of the material</td><td>string</td><td>&quot;&quot;</td></tr><tr><td><code>opacity </code></td><td>Float in the range of <code>0.0 - 1.0</code> indicating how transparent the material is.</td><td>number</td><td>1</td></tr><tr><td><code>transparent </code></td><td>Defines whether this material is transparent.</td><td>boolean</td><td>false</td></tr><tr><td><code>vertexColors</code></td><td>Defines whether vertex coloring is used.</td><td>boolean</td><td>false</td></tr></tbody></table><h2 id="slots" tabindex="-1">Slots <a class="header-anchor" href="#slots" aria-hidden="true">#</a></h2><table><thead><tr><th>Name</th><th>Description</th><th>Bindings</th></tr></thead><tbody><tr><td>default</td><td></td><td></td></tr></tbody></table><h2 id="expose" tabindex="-1">Expose <a class="header-anchor" href="#expose" aria-hidden="true">#</a></h2><h3 id="three" tabindex="-1">three <a class="header-anchor" href="#three" aria-hidden="true">#</a></h3><blockquote><p>You can access the managed <code>THREE.MeshBasicMaterial</code> instance using the exposed <code>three</code> property.</p></blockquote><h4 id="example-code" tabindex="-1">Example code <a class="header-anchor" href="#example-code" aria-hidden="true">#</a></h4><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MeshBasicMaterial</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">material</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Do something with the THREE.MeshBasicMaterial instance</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">threeMaterial</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">material</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">three</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><hr>`,11),ae=JSON.parse('{"title":"MeshBasicMaterial","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[{"level":3,"title":"Code","slug":"code","link":"#code","children":[]}]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]},{"level":2,"title":"Slots","slug":"slots","link":"#slots","children":[]},{"level":2,"title":"Expose","slug":"expose","link":"#expose","children":[{"level":3,"title":"three","slug":"three","link":"#three","children":[]}]}],"relativePath":"components/Materials/MeshBasicMaterial.md"}'),j={name:"components/Materials/MeshBasicMaterial.md"},te=Object.assign(j,{setup(_){const n=B(""),s=$(()=>`<MeshBasicMaterial
  color="${n.value.color}"
  :transparent="${n.value.transparent}"
  :opacity="${Math.round(n.value.opacity*100)/100}"
/>`);return(i,l)=>{const c=d("ClientOnly"),m=d("LiveCodeBlock");return p(),h("div",null,[V,q,R,I,e(c,null,{default:o(()=>[e(N,{ref_key:"demo",ref:n},null,512)]),_:1}),O,H,e(c,null,{default:o(()=>[e(m,{lang:"vue-html",code:a(s)},null,8,["code"])]),_:1}),L])}}});export{ae as __pageData,te as default};
