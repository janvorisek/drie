import{c as r,f as g,n as P,h as z,_ as A,a as k}from"./chunks/TextureLoader.vue_vue_type_script_setup_true_lang.6d9097cd.js";import{_ as D}from"./chunks/PerspectiveCamera.vue_vue_type_script_setup_true_lang.fc33458a.js";import{_ as I}from"./chunks/OrbitControls.vue_vue_type_script_setup_true_lang.a7896d86.js";import{d as y,s as j,i as d,g as B,j as V,k as $,o as T,c as x,l as C,a as o,w as l,u as n,e as q,f as S}from"./app.ecc63a90.js";import{_ as E}from"./chunks/GLTFLoader.vue_vue_type_script_setup_true_lang.8f9f336d.js";import{_ as X}from"./chunks/AxesHelper.vue_vue_type_script_setup_true_lang.9b2db203.js";import{_ as Y}from"./chunks/AmbientLight.vue_vue_type_script_setup_true_lang.f2e978ed.js";import{V as Z}from"./chunks/v-tweakpane.de5ac47f.js";const N={name:"TransformControls",render:()=>null},O=y({...N,props:{mode:{default:"translate"},position:null,rotationSnap:{default:null},showX:{type:Boolean,default:!0},showY:{type:Boolean,default:!0},showZ:{type:Boolean,default:!0},size:{default:1},translationSnap:{default:null}},setup(p,{expose:i}){const t=p,e=j(null),a=d("scene"),c=d("mesh",null),m=d("parent",void 0),_=d("camera"),u=d("canvas"),b=d("enableAllControls"),v=d("disableAllControls");function s(){e.value!=null&&(e.value.mode=t.mode,e.value.size=t.size,e.value.showX=t.showX,e.value.showY=t.showY,e.value.showZ=t.showZ,e.value.translationSnap=t.translationSnap,e.value.rotationSnap=t.rotationSnap)}let h=!1;const w=()=>{!u.value&&!_.value||h||(e.value=new P(_.value,u.value),z(t,"position",e.value),c?e.value.attach(c):m&&e.value.attach(m),e.value.addEventListener("dragging-changed",function(f){f.value?v():b()}),a.add(e.value),s(),h=!0)};return B(u,()=>{w()}),s(),r(t,"mode",s),r(t,"size",s),r(t,"showX",s),r(t,"showY",s),r(t,"showZ",s),r(t,"rotationSnap",s),r(t,"translationSnap",s),V(()=>{a.remove(e.value),g(e.value)}),i({three:e}),{props:t,three:e,scene:a,mesh:c,parent:m,camera:_,canvas:u,enableAllControls:b,disableAllControls:v,applyProps:s,get boundCamera(){return h},set boundCamera(f){h=f},tryBindCamera:w}}}),R={class:"example-with-props"},M={class:"example"},L={class:"example-props"},U=y({__name:"TransformControls",setup(p,{expose:i}){const t=$({size:1,mode:"translate",showX:!0,showY:!0,showZ:!0}),e=a=>{a.addInput(t,"mode",{options:{translate:"translate",rotate:"rotate",scale:"scale"}}),a.addInput(t,"size",{min:0}),a.addInput(t,"showX"),a.addInput(t,"showY"),a.addInput(t,"showZ")};return i(t),(a,c)=>(T(),x("div",R,[C("div",M,[o(n(k),{ref:"renderer",antialias:!0},{default:l(()=>[o(n(D),{position:[3,3,5],up:[0,0,1]},{default:l(()=>[o(n(I))]),_:1}),o(n(A),{background:"#f9f9f9"},{default:l(()=>[o(n(Y)),o(n(E),{url:"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Avocado/glTF-Binary/Avocado.glb",position:[0,-3,0],scale:[100,100,100]},{default:l(()=>[o(n(O),{position:[0,3,0],size:t.size,mode:t.mode,"show-x":t.showX,"show-y":t.showY,"show-z":t.showZ},null,8,["size","mode","show-x","show-y","show-z"])]),_:1}),o(n(X),{size:3})]),_:1})]),_:1},512)]),C("div",L,[o(n(Z),{pane:{title:"Properties"},onOnPaneCreated:e})])]))}});const W=S('<h1 id="transformcontrols" tabindex="-1">TransformControls <a class="header-anchor" href="#transformcontrols" aria-hidden="true">#</a></h1><p>This component can be used to transform objects in 3D space by adapting a similar interaction model of DCC tools like Blender.</p><p>Unlike other controls, it is not intended to transform the scene&#39;s camera.</p><p><code>&lt;TransformControls&gt;</code> can be passed to any object (<code>&lt;Mesh&gt;</code>, <code>&lt;Group&gt;</code>, etc.).</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2>',5),F=S('<h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>mode </code></td><td>The current transformation mode.<br>Possible values are <code>&quot;translate&quot;</code>, <code>&quot;rotate&quot;</code> and <code>&quot;scale&quot;</code>.</td><td>Mode</td><td>&quot;translate&quot;</td></tr><tr><td><code>position </code></td><td>A <a href="/types#vector3like">Vector3Like</a> representing the object&#39;s local position.<br>Default position equals to the transformed mesh position.</td><td>Vector3Like</td><td></td></tr><tr><td><code>rotationSnap </code></td><td>By default, 3D objects are continuously rotated.<br>If you set this property to a numeric value (radians), you can define in which steps the 3D object should be rotated.<br>Set to <code>null</code> to disable snap.</td><td>union</td><td>null</td></tr><tr><td><code>showX </code></td><td>Whether or not the x-axis helper should be visible.</td><td>boolean</td><td>true</td></tr><tr><td><code>showY </code></td><td>Whether or not the y-axis helper should be visible.</td><td>boolean</td><td>true</td></tr><tr><td><code>showZ </code></td><td>Whether or not the z-axis helper should be visible.</td><td>boolean</td><td>true</td></tr><tr><td><code>size </code></td><td>The size of the helper UI (axes/planes).</td><td>number</td><td>1</td></tr><tr><td><code>translationSnap</code></td><td>By default, 3D objects are continuously translated.<br>If you set this property to a numeric value (world units), you can define in which steps the 3D object should be translated.<br>Set to <code>null</code> to disable snap.</td><td>union</td><td>null</td></tr></tbody></table><hr>',3),st=JSON.parse('{"title":"TransformControls","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]}],"relativePath":"components/Controls/TransformControls.md"}'),G={name:"components/Controls/TransformControls.md"},nt=Object.assign(G,{setup(p){return(i,t)=>{const e=q("ClientOnly");return T(),x("div",null,[W,o(e,null,{default:l(()=>[o(U)]),_:1}),F])}}});export{st as __pageData,nt as default};
