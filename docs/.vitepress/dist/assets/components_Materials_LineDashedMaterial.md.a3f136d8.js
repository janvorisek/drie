import{y as g,c as r,C as S,_ as z,b,a as x}from"./chunks/TextureLoader.vue_vue_type_script_setup_true_lang.08ce1c9b.js";import{_ as y}from"./chunks/PerspectiveCamera.vue_vue_type_script_setup_true_lang.c3136209.js";import{_ as T}from"./chunks/OrbitControls.vue_vue_type_script_setup_true_lang.394588c3.js";import{_ as L}from"./chunks/LineSegments.vue_vue_type_script_setup_true_lang.bfe90b84.js";import{_ as C}from"./chunks/Mesh.vue_vue_type_script_setup_true_lang.b725e144.js";import{_ as D}from"./chunks/AxesHelper.vue_vue_type_script_setup_true_lang.68d7d968.js";import{_ as P}from"./chunks/CircleGeometry.vue_vue_type_script_setup_true_lang.f750fc39.js";import{_ as $}from"./chunks/EdgesGeometry.vue_vue_type_script_setup_true_lang.bc0aa607.js";import{d as h,i as p,p as M,k as v,o as m,c as f,l as _,a as o,w as n,u as d,e as I,f as u}from"./app.ffeda95b.js";import{V as w}from"./chunks/v-tweakpane.50fd9ec7.js";const A={name:"LineDashedMaterial",render:()=>null},k=h({...A,props:{color:{default:16777215},scale:{default:1},dashSize:{default:3},gapSize:{default:1},name:{default:""},opacity:{default:1},transparent:{type:Boolean,default:!1}},setup(i,{expose:a}){const t=i,e=new g({color:t.color});e.name=t.name;const l=p("addMaterial");l(e);const c=p("mesh",null);c&&(c.material=e);function s(){e.color=new S(t.color),e.scale=t.scale,e.dashSize=t.dashSize,e.gapSize=t.gapSize,e.opacity=t.opacity,e.transparent=t.transparent,e.needsUpdate=!0}return s(),r(t,"color",s),r(t,"scale",s),r(t,"dashSize",s),r(t,"gapSize",s),r(t,"opacity",s),r(t,"transparent",s),M("material",e),a({three:e}),{props:t,three:e,addMaterial:l,mesh:c,applyProps:s}}}),O={class:"example-with-props"},V={class:"example"},N={class:"example-props"},j=h({__name:"LineDashedMaterial",setup(i){const a=v({color:"#000000",scale:1,dashSize:.25,gapSize:.1,transparent:!1,opacity:1}),t=e=>{e.addInput(a,"color"),e.addInput(a,"scale",{min:.1,max:2}),e.addInput(a,"dashSize",{min:.01,max:1}),e.addInput(a,"gapSize",{min:.01,max:1}),e.addInput(a,"transparent"),e.addInput(a,"opacity",{min:0,max:1})};return(e,l)=>(m(),f("div",O,[_("div",V,[o(d(x),{antialias:!0},{default:n(()=>[o(d(y),{position:[.1,0,2],up:[0,0,1]},{default:n(()=>[o(d(T))]),_:1},8,["position"]),o(d(z),{background:"#f9f9f9"},{default:n(()=>[o(d(C),null,{default:n(()=>[o(d(b),{transparent:!0,opacity:0}),o(d(P),{name:"geo",radius:1})]),_:1}),o(d(L),null,{default:n(()=>[o(d($),{geometry:"geo"}),o(d(k),{color:a.color,scale:a.scale,"dash-size":a.dashSize,"gap-size":a.gapSize,transparent:a.transparent,opacity:a.opacity},null,8,["color","scale","dash-size","gap-size","transparent","opacity"])]),_:1}),o(d(D),{size:1})]),_:1})]),_:1})]),_("div",N,[o(d(w),{pane:{title:"Properties"},onOnPaneCreated:t})])]))}});const E=u('<h1 id="linedashedmaterial" tabindex="-1">LineDashedMaterial <a class="header-anchor" href="#linedashedmaterial" aria-hidden="true">#</a></h1><p>A material for drawing dashed line geometries.</p><p>Suitable for <a href="/components/Objects/Line"><code>&lt;Line /&gt;</code></a>, <a href="/components/Objects/LineSegments"><code>&lt;LineSegments /&gt;</code></a> or <a href="/components/Objects/LineLoop"><code>&lt;LineLoop /&gt;</code></a>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2>',4),B=u('<h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>color </code></td><td>Color of the material.</td><td>union</td><td>0xffffff</td></tr><tr><td><code>scale </code></td><td>The scale of the dashed part of a line.</td><td>number</td><td>1</td></tr><tr><td><code>dashSize </code></td><td>The size of the dash. This is both the gap with the stroke.</td><td>number</td><td>3</td></tr><tr><td><code>gapSize </code></td><td>The size of the gap.</td><td>number</td><td>1</td></tr><tr><td><code>name </code></td><td>Name of the material</td><td>string</td><td>&quot;&quot;</td></tr><tr><td><code>opacity </code></td><td>Float in the range of <code>0.0 - 1.0</code> indicating how transparent the material is.</td><td>number</td><td>1</td></tr><tr><td><code>transparent</code></td><td>Defines whether this material is transparent.</td><td>boolean</td><td>false</td></tr></tbody></table><hr>',3),Y=JSON.parse('{"title":"LineDashedMaterial","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]}],"relativePath":"components/Materials/LineDashedMaterial.md"}'),R={name:"components/Materials/LineDashedMaterial.md"},Z=Object.assign(R,{setup(i){return(a,t)=>{const e=I("ClientOnly");return m(),f("div",null,[E,o(e,null,{default:n(()=>[o(j)]),_:1}),B])}}});export{Y as __pageData,Z as default};
