import{_ as e,o as t,c as r,f as a}from"./app.1c8440b8.js";const g=JSON.parse('{"title":"TextureLoader","description":"","frontmatter":{},"headers":[{"level":2,"title":"Props","slug":"props","link":"#props","children":[]}],"relativePath":"components/Textures/TextureLoader.md"}'),d={name:"components/Textures/TextureLoader.md"},o=a('<h1 id="textureloader" tabindex="-1">TextureLoader <a class="header-anchor" href="#textureloader" aria-hidden="true">#</a></h1><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>url </code></td><td>The path or URL to the texture file. This can also be a Data URI.</td><td>string</td><td></td></tr><tr><td><code>wrapS </code></td><td>This defines how the texture is wrapped horizontally and corresponds to U in UV mapping.<br>The default is <code>THREE.ClampToEdgeWrapping</code>, where the edge is clamped to the outer edge texels.<br>The other two choices are <code>THREE.RepeatWrapping</code> and <code>THREE.MirroredRepeatWrapping</code>.<br>See the <a href="https://threejs.org/docs/?q=texture#api/en/constants/Textures" target="_blank" rel="noreferrer">texture constants</a> page for details.</td><td>Wrapping</td><td>ClampToEdgeWrapping</td></tr><tr><td><code>wrapT </code></td><td>This defines how the texture is wrapped vertically and corresponds to V in UV mapping.<br>The default is <code>THREE.ClampToEdgeWrapping</code>, where the edge is clamped to the outer edge texels.<br>The other two choices are <code>THREE.RepeatWrapping</code> and <code>THREE.MirroredRepeatWrapping</code>.<br>See the <a href="https://threejs.org/docs/?q=texture#api/en/constants/Textures" target="_blank" rel="noreferrer">texture constants</a> page for details.</td><td>Wrapping</td><td>ClampToEdgeWrapping</td></tr></tbody></table><hr>',4),s=[o];function p(n,h,i,c,l,T){return t(),r("div",null,s)}const _=e(d,[["render",p]]);export{g as __pageData,_ as default};
