import{c as r,f as S,o as k,h as P,_ as z,a as A}from"./chunks/TextureLoader.vue_vue_type_script_setup_true_lang.25647115.js";import{_ as D}from"./chunks/PerspectiveCamera.vue_vue_type_script_setup_true_lang.41177333.js";import{_ as I}from"./chunks/OrbitControls.vue_vue_type_script_setup_true_lang.af8d0c48.js";import{d as x,s as j,i as d,g as q,j as B,k as V,o as y,c as T,l as C,a as o,w as l,u as n,e as $,f as g}from"./app.62c82040.js";import{_ as E}from"./chunks/GLTFLoader.vue_vue_type_script_setup_true_lang.b31648fe.js";import{_ as X}from"./chunks/AxesHelper.vue_vue_type_script_setup_true_lang.fe0f63a1.js";import{_ as Y}from"./chunks/AmbientLight.vue_vue_type_script_setup_true_lang.7f2966b9.js";import{V as Z}from"./chunks/v-tweakpane.ad34b253.js";const N={name:"TransformControls",render:()=>null},O=x({...N,props:{mode:{default:"translate"},position:null,rotationSnap:{default:null},showX:{type:Boolean,default:!0},showY:{type:Boolean,default:!0},showZ:{type:Boolean,default:!0},size:{default:1},translationSnap:{default:null}},setup(p,{expose:i}){const e=p,t=j(null),a=d("scene"),c=d("mesh",null),m=d("parent",void 0),_=d("camera"),h=d("canvas"),b=d("enableAllControls"),v=d("disableAllControls");function s(){t.value!=null&&(t.value.mode=e.mode,t.value.size=e.size,t.value.showX=e.showX,t.value.showY=e.showY,t.value.showZ=e.showZ,t.value.translationSnap=e.translationSnap,t.value.rotationSnap=e.rotationSnap)}let u=!1;const w=()=>{!h.value&&!_.value||u||(t.value=new k(_.value,h.value),P(e,"position",t.value),c?t.value.attach(c):m&&t.value.attach(m),t.value.addEventListener("dragging-changed",function(f){f.value?v():b()}),a.add(t.value),s(),u=!0)};return q(h,()=>{w()}),s(),r(e,"mode",s),r(e,"size",s),r(e,"showX",s),r(e,"showY",s),r(e,"showZ",s),r(e,"rotationSnap",s),r(e,"translationSnap",s),B(()=>{a.remove(t.value),S(t.value)}),i({three:t}),{props:e,three:t,scene:a,mesh:c,parent:m,camera:_,canvas:h,enableAllControls:b,disableAllControls:v,applyProps:s,get boundCamera(){return u},set boundCamera(f){u=f},tryBindCamera:w}}}),R={class:"example-with-props"},M={class:"example"},L={class:"example-props"},U=x({__name:"TransformControls",setup(p,{expose:i}){const e=V({size:1,mode:"translate",showX:!0,showY:!0,showZ:!0}),t=a=>{a.addInput(e,"mode",{options:{translate:"translate",rotate:"rotate",scale:"scale"}}),a.addInput(e,"size",{min:0}),a.addInput(e,"showX"),a.addInput(e,"showY"),a.addInput(e,"showZ")};return i(e),(a,c)=>(y(),T("div",R,[C("div",M,[o(n(A),{ref:"renderer",antialias:!0},{default:l(()=>[o(n(D),{position:[3,3,5],up:[0,0,1]},{default:l(()=>[o(n(I))]),_:1}),o(n(z),{background:"#f9f9f9"},{default:l(()=>[o(n(Y)),o(n(E),{url:"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Avocado/glTF-Binary/Avocado.glb",position:[0,-3,0],scale:[100,100,100]},{default:l(()=>[o(n(O),{position:[0,3,0],size:e.size,mode:e.mode,"show-x":e.showX,"show-y":e.showY,"show-z":e.showZ},null,8,["size","mode","show-x","show-y","show-z"])]),_:1}),o(n(X),{size:3})]),_:1})]),_:1},512)]),C("div",L,[o(n(Z),{pane:{title:"Properties"},onOnPaneCreated:t})])]))}});const W=g('<h1 id="transformcontrols" tabindex="-1">TransformControls <a class="header-anchor" href="#transformcontrols" aria-hidden="true">#</a></h1><p>This component can be used to transform objects in 3D space by adapting a similar interaction model of DCC tools like Blender.</p><p>Unlike other controls, it is not intended to transform the scene&#39;s camera.</p><p><code>&lt;TransformControls&gt;</code> can be passed to any object (<code>&lt;Mesh&gt;</code>, <code>&lt;Group&gt;</code>, etc.).</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2>',5),F=g('<h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>mode </code></td><td>The current transformation mode.<br>Possible values are <code>&quot;translate&quot;</code>, <code>&quot;rotate&quot;</code> and <code>&quot;scale&quot;</code>.</td><td>Mode</td><td>&quot;translate&quot;</td></tr><tr><td><code>position </code></td><td>A <a href="/types#vector3like">Vector3Like</a> representing the object&#39;s local position.<br>Default position equals to the transformed mesh position.</td><td>Vector3Like</td><td></td></tr><tr><td><code>rotationSnap </code></td><td>By default, 3D objects are continuously rotated.<br>If you set this property to a numeric value (radians), you can define in which steps the 3D object should be rotated.<br>Set to <code>null</code> to disable snap.</td><td>union</td><td>null</td></tr><tr><td><code>showX </code></td><td>Whether or not the x-axis helper should be visible.</td><td>boolean</td><td>true</td></tr><tr><td><code>showY </code></td><td>Whether or not the y-axis helper should be visible.</td><td>boolean</td><td>true</td></tr><tr><td><code>showZ </code></td><td>Whether or not the z-axis helper should be visible.</td><td>boolean</td><td>true</td></tr><tr><td><code>size </code></td><td>The size of the helper UI (axes/planes).</td><td>number</td><td>1</td></tr><tr><td><code>translationSnap</code></td><td>By default, 3D objects are continuously translated.<br>If you set this property to a numeric value (world units), you can define in which steps the 3D object should be translated.<br>Set to <code>null</code> to disable snap.</td><td>union</td><td>null</td></tr></tbody></table><h2 id="expose" tabindex="-1">Expose <a class="header-anchor" href="#expose" aria-hidden="true">#</a></h2><h3 id="three" tabindex="-1">three <a class="header-anchor" href="#three" aria-hidden="true">#</a></h3><blockquote></blockquote><hr>',6),se=JSON.parse('{"title":"TransformControls","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Props","slug":"props","link":"#props","children":[]},{"level":2,"title":"Expose","slug":"expose","link":"#expose","children":[{"level":3,"title":"three","slug":"three","link":"#three","children":[]}]}],"relativePath":"components/Controls/TransformControls.md"}'),G={name:"components/Controls/TransformControls.md"},ne=Object.assign(G,{setup(p){return(i,e)=>{const t=$("ClientOnly");return y(),T("div",null,[W,o(t,null,{default:l(()=>[o(U)]),_:1}),F])}}});export{se as __pageData,ne as default};
